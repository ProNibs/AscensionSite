# -*- coding: utf-8 -*-
# Generated by Django 1.11.13 on 2019-02-03 23:00
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('AscensionESports_Baseline', '0018_auto_20190203_1647'),
    ]

    operations = [
        migrations.CreateModel(
            name='Dragon_League_Rosters',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('acronym', models.CharField(max_length=4)),
                ('team_name', models.CharField(max_length=25)),
                ('wins', models.PositiveIntegerField(default=0)),
                ('losses', models.PositiveIntegerField(default=0)),
                ('tie_breaker', models.PositiveIntegerField(default=0)),
                ('is_active', models.BooleanField(default=True, help_text='This will change to false whenever the League is over.')),
                ('sub1_role', models.CharField(blank=True, choices=[('Top', 'Top'), ('Jungle', 'Jungle'), ('Mid', 'Mid'), ('ADC', 'ADC'), ('Support', 'Support'), ('Fill', 'Fill')], default='N/A', max_length=20)),
                ('sub2_role', models.CharField(blank=True, choices=[('Top', 'Top'), ('Jungle', 'Jungle'), ('Mid', 'Mid'), ('ADC', 'ADC'), ('Support', 'Support'), ('Fill', 'Fill')], default='N/A', max_length=20)),
                ('sub3_role', models.CharField(blank=True, choices=[('Top', 'Top'), ('Jungle', 'Jungle'), ('Mid', 'Mid'), ('ADC', 'ADC'), ('Support', 'Support'), ('Fill', 'Fill')], default='N/A', max_length=20)),
                ('coach', models.CharField(blank=True, max_length=32)),
            ],
            options={
                'verbose_name_plural': 'Dragon Rosters',
                'db_table': 'Dragon Rosters',
            },
        ),
        migrations.CreateModel(
            name='Dragon_Players',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('summoner_name', models.CharField(max_length=32, unique=True)),
                ('primary_role', models.CharField(choices=[('Top', 'Top'), ('Jungle', 'Jungle'), ('Mid', 'Mid'), ('ADC', 'ADC'), ('Support', 'Support'), ('Fill', 'Fill')], max_length=20)),
                ('secondary_role', models.CharField(choices=[('Top', 'Top'), ('Jungle', 'Jungle'), ('Mid', 'Mid'), ('ADC', 'ADC'), ('Support', 'Support'), ('Fill', 'Fill')], max_length=20)),
                ('games_played', models.PositiveIntegerField(default=0)),
                ('mins_played', models.PositiveIntegerField(default=0)),
                ('first_bloods', models.PositiveIntegerField(default=0)),
                ('largest_multi_kill', models.PositiveIntegerField(default=0)),
                ('first_tower', models.PositiveIntegerField(default=0)),
                ('kills', models.PositiveIntegerField(default=0)),
                ('deaths', models.PositiveIntegerField(default=0)),
                ('assists', models.PositiveIntegerField(default=0)),
                ('creep_score', models.PositiveIntegerField(default=0)),
                ('gold', models.PositiveIntegerField(default=0)),
                ('gold_share', models.FloatField(default=0)),
                ('damage_done', models.PositiveIntegerField(default=0)),
                ('damage_share', models.FloatField(default=0)),
                ('vision_score', models.PositiveIntegerField(default=0)),
                ('crowd_control_score', models.PositiveIntegerField(default=0)),
                ('csd_at_ten', models.FloatField(default=0)),
                ('KDA', models.FloatField(default=0)),
                ('avg_kills', models.FloatField(default=0)),
                ('avg_deaths', models.FloatField(default=0)),
                ('avg_assists', models.FloatField(default=0)),
                ('avg_creep_score', models.FloatField(default=0)),
                ('avg_gold', models.FloatField(default=0)),
                ('avg_gold_share', models.FloatField(default=0)),
                ('avg_damage_done', models.FloatField(default=0)),
                ('avg_damage_share', models.FloatField(default=0)),
                ('avg_vision_score', models.FloatField(default=0)),
                ('avg_crowd_control_score', models.FloatField(default=0)),
                ('avg_csd_at_ten', models.FloatField(default=0)),
                ('creep_score_per_minute', models.FloatField(default=0)),
                ('gold_per_minute', models.FloatField(default=0)),
                ('damage_done_per_minute', models.FloatField(default=0)),
                ('vision_score_per_minute', models.FloatField(default=0)),
                ('crowd_control_score_per_minute', models.FloatField(default=0)),
            ],
            options={
                'verbose_name_plural': 'Dragon Players',
                'db_table': 'Dragon Players',
            },
        ),
        migrations.CreateModel(
            name='Elder_League_Rosters',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('acronym', models.CharField(max_length=4)),
                ('team_name', models.CharField(max_length=25)),
                ('wins', models.PositiveIntegerField(default=0)),
                ('losses', models.PositiveIntegerField(default=0)),
                ('tie_breaker', models.PositiveIntegerField(default=0)),
                ('is_active', models.BooleanField(default=True, help_text='This will change to false whenever the League is over.')),
                ('sub1_role', models.CharField(blank=True, choices=[('Top', 'Top'), ('Jungle', 'Jungle'), ('Mid', 'Mid'), ('ADC', 'ADC'), ('Support', 'Support'), ('Fill', 'Fill')], default='N/A', max_length=20)),
                ('sub2_role', models.CharField(blank=True, choices=[('Top', 'Top'), ('Jungle', 'Jungle'), ('Mid', 'Mid'), ('ADC', 'ADC'), ('Support', 'Support'), ('Fill', 'Fill')], default='N/A', max_length=20)),
                ('sub3_role', models.CharField(blank=True, choices=[('Top', 'Top'), ('Jungle', 'Jungle'), ('Mid', 'Mid'), ('ADC', 'ADC'), ('Support', 'Support'), ('Fill', 'Fill')], default='N/A', max_length=20)),
                ('coach', models.CharField(blank=True, max_length=32)),
            ],
            options={
                'verbose_name_plural': 'Elder Rosters',
                'db_table': 'Elder Rosters',
            },
        ),
        migrations.CreateModel(
            name='Elder_Players',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('summoner_name', models.CharField(max_length=32, unique=True)),
                ('primary_role', models.CharField(choices=[('Top', 'Top'), ('Jungle', 'Jungle'), ('Mid', 'Mid'), ('ADC', 'ADC'), ('Support', 'Support'), ('Fill', 'Fill')], max_length=20)),
                ('secondary_role', models.CharField(choices=[('Top', 'Top'), ('Jungle', 'Jungle'), ('Mid', 'Mid'), ('ADC', 'ADC'), ('Support', 'Support'), ('Fill', 'Fill')], max_length=20)),
                ('games_played', models.PositiveIntegerField(default=0)),
                ('mins_played', models.PositiveIntegerField(default=0)),
                ('first_bloods', models.PositiveIntegerField(default=0)),
                ('largest_multi_kill', models.PositiveIntegerField(default=0)),
                ('first_tower', models.PositiveIntegerField(default=0)),
                ('kills', models.PositiveIntegerField(default=0)),
                ('deaths', models.PositiveIntegerField(default=0)),
                ('assists', models.PositiveIntegerField(default=0)),
                ('creep_score', models.PositiveIntegerField(default=0)),
                ('gold', models.PositiveIntegerField(default=0)),
                ('gold_share', models.FloatField(default=0)),
                ('damage_done', models.PositiveIntegerField(default=0)),
                ('damage_share', models.FloatField(default=0)),
                ('vision_score', models.PositiveIntegerField(default=0)),
                ('crowd_control_score', models.PositiveIntegerField(default=0)),
                ('csd_at_ten', models.FloatField(default=0)),
                ('KDA', models.FloatField(default=0)),
                ('avg_kills', models.FloatField(default=0)),
                ('avg_deaths', models.FloatField(default=0)),
                ('avg_assists', models.FloatField(default=0)),
                ('avg_creep_score', models.FloatField(default=0)),
                ('avg_gold', models.FloatField(default=0)),
                ('avg_gold_share', models.FloatField(default=0)),
                ('avg_damage_done', models.FloatField(default=0)),
                ('avg_damage_share', models.FloatField(default=0)),
                ('avg_vision_score', models.FloatField(default=0)),
                ('avg_crowd_control_score', models.FloatField(default=0)),
                ('avg_csd_at_ten', models.FloatField(default=0)),
                ('creep_score_per_minute', models.FloatField(default=0)),
                ('gold_per_minute', models.FloatField(default=0)),
                ('damage_done_per_minute', models.FloatField(default=0)),
                ('vision_score_per_minute', models.FloatField(default=0)),
                ('crowd_control_score_per_minute', models.FloatField(default=0)),
            ],
            options={
                'verbose_name_plural': 'Elder Players',
                'db_table': 'Elder Players',
            },
        ),
        migrations.DeleteModel(
            name='Baron_League',
        ),
        migrations.DeleteModel(
            name='Dragon_League',
        ),
        migrations.DeleteModel(
            name='Elder_League',
        ),
        migrations.AddField(
            model_name='elder_league_rosters',
            name='ad_carry',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='ad_carry', to='AscensionESports_Baseline.Elder_Players'),
        ),
        migrations.AddField(
            model_name='elder_league_rosters',
            name='jungler',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='jungler', to='AscensionESports_Baseline.Elder_Players'),
        ),
        migrations.AddField(
            model_name='elder_league_rosters',
            name='mid_laner',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='mid_laner', to='AscensionESports_Baseline.Elder_Players'),
        ),
        migrations.AddField(
            model_name='elder_league_rosters',
            name='substitute1',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='substitute1', to='AscensionESports_Baseline.Elder_Players'),
        ),
        migrations.AddField(
            model_name='elder_league_rosters',
            name='substitute2',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='substitute2', to='AscensionESports_Baseline.Elder_Players'),
        ),
        migrations.AddField(
            model_name='elder_league_rosters',
            name='substitute3',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='substitute3', to='AscensionESports_Baseline.Elder_Players'),
        ),
        migrations.AddField(
            model_name='elder_league_rosters',
            name='support',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='support', to='AscensionESports_Baseline.Elder_Players'),
        ),
        migrations.AddField(
            model_name='elder_league_rosters',
            name='top_laner',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='top_laner', to='AscensionESports_Baseline.Elder_Players'),
        ),
        migrations.AddField(
            model_name='dragon_league_rosters',
            name='ad_carry',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='ad_carry', to='AscensionESports_Baseline.Dragon_Players'),
        ),
        migrations.AddField(
            model_name='dragon_league_rosters',
            name='jungler',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='jungler', to='AscensionESports_Baseline.Dragon_Players'),
        ),
        migrations.AddField(
            model_name='dragon_league_rosters',
            name='mid_laner',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='mid_laner', to='AscensionESports_Baseline.Dragon_Players'),
        ),
        migrations.AddField(
            model_name='dragon_league_rosters',
            name='substitute1',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='substitute1', to='AscensionESports_Baseline.Dragon_Players'),
        ),
        migrations.AddField(
            model_name='dragon_league_rosters',
            name='substitute2',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='substitute2', to='AscensionESports_Baseline.Dragon_Players'),
        ),
        migrations.AddField(
            model_name='dragon_league_rosters',
            name='substitute3',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='substitute3', to='AscensionESports_Baseline.Dragon_Players'),
        ),
        migrations.AddField(
            model_name='dragon_league_rosters',
            name='support',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='support', to='AscensionESports_Baseline.Dragon_Players'),
        ),
        migrations.AddField(
            model_name='dragon_league_rosters',
            name='top_laner',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='top_laner', to='AscensionESports_Baseline.Dragon_Players'),
        ),
    ]
